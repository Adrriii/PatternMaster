import os
import datetime

now = datetime.datetime.now()

PLUGIN = "plugin.lua"
VERSION_PREFIX = "b"
HEADER = """
--[[

    THIS FILE IS AUTOGENERATED WITH THE COMPILE.PY FILE.
    THIS IS DONE IN ORDER TO ALLOW A MULTIFILE MODULE STRUCTURE
    FOR THE PROJECT.

    For users:
        Don't worry too much about it. You only really need the
        plugin.lua file and the settings.ini file. Delete everything
        else, if you really don't care about anything.

    For developers:
        Please refrain from editing the plugin.lua file directly.
        Rather, do edit the modules directly and then compile with
        the provided script.

]]

-- MODULES:
""".strip() + "\n"

VAR_DICTIONARY = {
    "%VERSION%": VERSION_PREFIX + f"{now.year}.{now.month}.{now.day}"
}


def searchTree(path: str) -> (list, list):
    modules = []
    lines = []

    for filePath in os.listdir(path):
        newPath = os.path.join(path, filePath)

        if os.path.isdir(newPath):
            returnValues = searchTree(newPath)
            modules.extend(returnValues[0])
            lines.extend(returnValues[1])
        elif newPath.endswith(".lua"):
            moduleName = os.path.basename(newPath)[:-len(".lua")]
            if not moduleName.startswith("_"):
                modules.append(moduleName)
            with open(newPath) as file:
                lines.extend([
                    "",
                    "-"*85,
                    f"-- {newPath}",
                    "-"*85,
                    ""
                ])
                lines.extend([line.strip("\n") for line in file.readlines()])

    return modules, lines


def replaceVars(content: str) -> str:
    for var in VAR_DICTIONARY:
        content = content.replace(var, VAR_DICTIONARY[var])
    return content


if __name__ == "__main__":
    returnValues = searchTree("modules")

    modulesString = "\n".join(
        [f"{module} = {{}}" for module in returnValues[0]]
    )

    content = replaceVars("\n".join(returnValues[1]))

    with open(PLUGIN, "w+") as pluginFile:
        pluginFile.write(HEADER)
        pluginFile.write(modulesString)
        pluginFile.write(content)
